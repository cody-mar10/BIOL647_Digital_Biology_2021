# #+TITLE: Digital Biology
#+AUTHOR: Rodolfo Aramayo
#+EMAIL: raramayo@tamu.edu
#+STARTUP: align
* *[[https://www.gnu.org/software/emacs/][Emacs]]*
** *[[https://www.gnu.org/software/emacs/tour/index.html][Emacs Tour]]*
** *Basic_Emacs*
+ SSH into DigitalBiology
  : ssh YourDigitalBiologyUsername@149.165.156.11
+ Open Emacs
  : emacs 
+ Notation: We use a notation like *ctrl + x or C-x* to denote depressing the Ctrl (Control) key,
  then pressing the x key while Ctrl is depressed, then releasing both keys.
+ We employ the notation used in the Emacs documentation, which
  abbreviates *ctrl + x* as *C-x*
+ *C-x-f (load file into buffer)*
  + The command *C-x-f* (press the Ctrl key, press and release x,
    press and release f, release Ctrl) loads a file on disk into an
    Emacs buffer (an Emacs working area) for editing.  You are
    prompted for the name of the file to load.  You may then make
    changes to the buffer by typing and by using other Emacs commands.
    The buffer is not saved to a file on disk until you specifically
    request it with, for example, the *C-x-s* command
+ *C-x-s (save buffer to file)*
  + The command *C-x-s* saves the current Emacs buffer to disk as
    the currently named file.  The name of the file is located on a
    bar at the bottom of the window
+ *C-k (kill line)* *Kill=Copy*
  + The command *C-k* kills (deletes) the current line in the current
    buffer from the cursor to the end of the line
+ *C-y (yank back line)* *Yank=Paste*
  + This command "yanks back" the most recently killed line or set of
    lines and pastes it into the current cursor position
+ *C-x-c (exit Emacs)*
  + This command exits Emacs.  If buffers remain that are unsaved,
    Emacs asks you whether you want to save them
+ *Please do this later, not now:* *C-h ? (general help)*
  + This command offers a number of help options
+ *Please do this later, not now:* *C-h t (start the Emacs tutorial)*
  + The command *C-h t* (press the Ctrl key, press and release h,
    release Ctrl, press and release t) starts the Emacs tutorial.
    This takes you step-by-step through some basic Emacs commands
+ [[https://www.gnu.org/software/emacs/refcards/pdf/refcard.pdf][Emacs_Reference_Card]]
+ [[https://www.gnu.org/software/emacs/refcards/pdf/survival.pdf][Emacs_Survival_Guide]]
+ [[https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][Emacs_Manual_HTML]]
+ [[https://www.gnu.org/software/emacs/manual/pdf/emacs.pdf][Emacs_Manual_PDF]]
+ [[http://write.flossmanuals.net/command-line/emacs/][Basic editing commands and FLOSS Manuals]]
** *[[http://tuhdo.github.io/index.html][Fantastic Tutorial]]*
** *Great Emacs Tutorials* *Watch Them Later, if you can*
+ [[https://youtu.be/MRYzPWnk2mE][.Emacs #1 - Getting Started and Playing Games]]
+ [[https://youtu.be/mMcc0IF1hV0][.Emacs #2 - Customizations and Themes]]
+ [[https://youtu.be/Cf6tRBPbWKs][.Emacs #3 - Installing Packages and Extensions]] <-Important
+ [[https://youtu.be/7jZdul2fC94][.Emacs #4 - Exploring the Filesystem with Dired]] <-Important
+ [[https://youtu.be/JsggDFtAA78][.Emacs #5 - Managing and Finding Buffers]] <-Important
+ [[https://youtu.be/bIE95Wc-kmg][.Emacs #6 - Searching and Finding Files]] <-Important
+ [[https://youtu.be/U2Rl23-_ePw][.Emacs #7 - The Command Line]] 
* 
| *Navigation:*             | *[[https://github.tamu.edu/DigitalBiology/BIOL647_Digital_Biology_2021/wiki][Home]]*                                                                       |
| *Author: [[raramayo@tamu.edu][Rodolfo Aramayo]]* | *License: [[http://creativecommons.org/licenses/by-nc-sa/4.0/][All content produced in this site is licensed by: CC BY-NC-SA 4.0]]* |
# * *Advanced_Emacs*
# + [[https://www.gnu.org/software/emacs/refcards/pdf/dired-ref.pdf][Emacs_Dired_Mode Reference Card]]
# ** *Shell Commands:*
# + It is super important to understand that you can invoke =shell=
#   commands from inside Emacs. For example, if you want to run the
#   =date= command, you would type:
#  #+BEGIN_SRC
#  M-x shell-command or M-! #Executes a command and displays the output in a new buffer
#  M-! date
#  #+END_SRC
#   + Note how the result is printed into the Emacs minibuffer
#   + If you, however want to execute a =shell= command using a region of
#     the buffer you are working on as input, you can issue the command:
#   #+BEGIN_SRC
#   M-x shell-command-on-region or M-|  #Executes a command, piping in the current region as input; displays the output in a new buffer
#   #+END_SRC
#   + Here if we were to select the set of numbers:
#   #+BEGIN_SRC
#   01
#   02
#   03
#   04
#   05
#   #+END_SRC
#   + And execute the command: =M-| sort -nr=, we would obtain (in this case in the minibuffer):
#   #+BEGIN_SRC
#   05
#   04
#   03
#   02
#   01
#   #+END_SRC
# + To run a =shell= command inside Emacs we proceed as follows:
#  #+BEGIN_SRC
#  C-u M !
#  Command #<=Input the command in the Emacs minibuffer
#  #+END_SRC
# ------------
# + Explain the use of search and replace: =M-%=
# + Emacs Macros
# ------------
# ** *Rectangle Commands:*
# + *Inserting a rectangle*
#   + *Rectangle example:*
#     #+BEGIN_SRC
#     pe1_01='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR097405_1.fastq.fastq.gz'
#     pe1_02='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR097405_2.fastq.fastq.gz'
#     pe1_03='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR097405.fastq.fastq.gz'
#     pe1_04='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR1564847.fastq.fastq.gz'
#     pe1_05='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR350087.fastq.fastq.gz'
#     pe1_06='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR350448_1.fastq.fastq.gz'
#     pe1_07='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR350448_2.fastq.fastq.gz'
#     pe1_08='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR350448_3.fastq.fastq.gz'
#     pe1_09='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR350448.fastq.fastq.gz'
#     pe1_10='/scratch/group/biol647/DB19S01B_00/DB190410.Homework/SRR536826.fastq.fastq.gz'
#     #+END_SRC
# + *Selecting a rectangle:*
#   1. Place cursor where you want the rectangle to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the rectangle to end
#   4. Copy the rectangle: =C-x r s 1=
#   5. Clear selection: =C-space-space=
# + *Inserting rectangle wherever you want*
#   1. Place cursor where you want therectangle to be
#   2. Copy the rectangle: =C-x r i 1= (here you can select =any= buffer
#      number. Unlike other applications, Emacs allows you to store
#      information in as many buffers as you have memory available
# + *Killing (cut) a rectangle:* =M-x kill-rectangle= or =C-x r k=
#   1. Place cursor where you want the rectangle to be killed to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the rectangle to be killed to end
#   4. Kill rectangle: =C-x r k=
#   5. *IMPORTANT: This command load the kill into memory*
# + *Delete a rectangle:* =M-x Delete-rectangle= or =C-x r d=
#   1. Place cursor where you want the rectangle to be deleted to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the rectangle to be deleted to end
#   4. Delete-rectangle: =C-x r d=
#   5. *IMPORTANT: This command DOES NOT load the deletion into memory*
# + *Yanking (pasting) a rectangle:* =M-x paste-rectangle= or =C-x r y=
#   1. This command will replace whatever you have previously loaded in
#      memory. You therefor need to call =kill-rectangle= first
#   2. Place cursor where you want the rectangle to be yanked to start
#   3. Yank rectangle: =C-x r y=
# + *Inserting a string into a rectangle:* =M-x string-insert-rectangle=
#   1. Place cursor where you want the rectangle to be processed to start
#   2. Define the start of the rectangle: =C-space=
#   3. Define the lines you want to be affected
#   4. =M-x string-insert-rectangle=
#   5. Define replacement string
# + *Replacing a rectangle:* =M-x replace-rectangle= or =C-x r t=
#   1. Place cursor where you want the rectangle to be replaced to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the rectangle to be replaced to end
#   4. Replace rectangle: =C-x r t= or =M-x replace-rectangle=
#   5. Insert replacing text
# + *Inserting a column of numbers into a rectangle:* =M-x rectangle-number-lines or C-r N=
#   1. Define the lines you want numbered by placing cursor at the first line
#   2. Define the start: =C-space=
#   3. Place cursor at the line you want the numbering to stop
#   4. Number lines: =M-x rectangle-number-lines=
# + *Clearing a rectangle:* =M-x clear-rectangle= or =C-x r c=
#   1. Place cursor where you want the rectangle to be cleared to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the rectangle to be cleared to end
#   4. Clear the rectangle: =C-x r c=
# + *Deleting a white space rectangle:* =M-x delete-whitespace-rectangle=
#   1. Place cursor where you want the white space rectangle to be deleted to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the white space rectangle to be deleted to end
#   4. Delete-rectangle: =M-x delete-whitespace-rectangle=
# + *Opening a rectangle:* =C-x r o= or =M-x open-rectangle=
#   1. Place cursor where you want the rectangle to be opened to start
#   2. Define the start of the rectangle: =C-space=
#   3. Place cursor where you want the rectangle to be opened to end
#   4. Open-rectangle: =C-x r o=
